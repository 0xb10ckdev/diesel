error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/distinct_on_allows_only_fields_of_table.rs:23:30
    |
23  |     users::table.distinct_on(posts::id).get_results(&mut connection);
    |                  ----------- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |                  |
    |                  required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
    = note: required for `SelectStatement<FromClause<users::table>>` to implement `DistinctOnDsl<posts::columns::id>`
    = note: 1 redundant requirement hidden
    = note: required for `users::table` to implement `DistinctOnDsl<posts::columns::id>`
note: required by a bound in `diesel::QueryDsl::distinct_on`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |         Self: methods::DistinctOnDsl<Expr>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::QueryDsl::distinct_on`

error[E0277]: the trait bound `(diesel::sql_types::Text, diesel::sql_types::Text): SingleValue` is not satisfied
   --> tests/fail/distinct_on_allows_only_fields_of_table.rs:25:30
    |
25  |     posts::table.distinct_on((posts::name, users::name)).get_result(&mut connection);
    |                  ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SingleValue` is not implemented for `(diesel::sql_types::Text, diesel::sql_types::Text)`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `SingleValue`:
              Array<ST>
              BigInt
              Bool
              CChar
              Cidr
              Datetime
              Inet
              Interval
            and 23 others
    = note: required for `posts::table` to implement `DistinctOnDsl<(posts::columns::name, users::columns::name)>`
note: required by a bound in `diesel::QueryDsl::distinct_on`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |         Self: methods::DistinctOnDsl<Expr>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::QueryDsl::distinct_on`

error[E0277]: Cannot select `users::columns::name` from `posts::table`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:25:18
   |
25 |     posts::table.distinct_on((posts::name, users::name)).get_result(&mut connection);
   |                  ^^^^^^^^^^^ the trait `SelectableExpression<posts::table>` is not implemented for `users::columns::name`
   |
   = note: `users::columns::name` is no valid selection for `posts::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             <users::columns::name as SelectableExpression<JoinOn<Join, On>>>
             <users::columns::name as SelectableExpression<Only<users::table>>>
             <users::columns::name as SelectableExpression<SelectStatement<FromClause<From>>>>
             <users::columns::name as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
             <users::columns::name as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
             <users::columns::name as SelectableExpression<users::table>>
   = note: required for `(posts::columns::name, users::columns::name)` to implement `SelectableExpression<posts::table>`
   = note: required for `posts::table` to implement `DistinctOnDsl<(posts::columns::name, users::columns::name)>`

error[E0271]: type mismatch resolving `<posts::table as AppearsInFromClause<users::table>>::Count == diesel::query_source::Once`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:25:18
   |
25 |     posts::table.distinct_on((posts::name, users::name)).get_result(&mut connection);
   |                  ^^^^^^^^^^^ expected struct `diesel::query_source::Never`, found struct `diesel::query_source::Once`
   |
note: required for `users::columns::name` to implement `AppearsOnTable<posts::table>`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:8:9
   |
8  |         name -> VarChar,
   |         ^^^^
   = note: 1 redundant requirement hidden
   = note: required for `(posts::columns::name, users::columns::name)` to implement `AppearsOnTable<posts::table>`
   = note: required for `(posts::columns::name, users::columns::name)` to implement `SelectableExpression<posts::table>`
   = note: required for `posts::table` to implement `DistinctOnDsl<(posts::columns::name, users::columns::name)>`

error[E0277]: the trait bound `posts::table: TableNotEqual<users::table>` is not satisfied
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:25:18
   |
25 |     posts::table.distinct_on((posts::name, users::name)).get_result(&mut connection);
   |                  ^^^^^^^^^^^ the trait `TableNotEqual<users::table>` is not implemented for `posts::table`
   |
   = help: the following other types implement trait `TableNotEqual<T>`:
             <Only<pg::metadata_lookup::pg_namespace::table> as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <Only<pg::metadata_lookup::pg_type::table> as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<Only<pg::metadata_lookup::pg_type::table>>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <pg::metadata_lookup::pg_type::table as TableNotEqual<Only<pg::metadata_lookup::pg_namespace::table>>>
             <pg::metadata_lookup::pg_type::table as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
   = note: required for `posts::table` to implement `AppearsInFromClause<users::table>`
note: required for `users::columns::name` to implement `AppearsOnTable<posts::table>`
  --> tests/fail/distinct_on_allows_only_fields_of_table.rs:8:9
   |
8  |         name -> VarChar,
   |         ^^^^
   = note: 1 redundant requirement hidden
   = note: required for `(posts::columns::name, users::columns::name)` to implement `AppearsOnTable<posts::table>`
   = note: required for `(posts::columns::name, users::columns::name)` to implement `SelectableExpression<posts::table>`
   = note: required for `posts::table` to implement `DistinctOnDsl<(posts::columns::name, users::columns::name)>`
