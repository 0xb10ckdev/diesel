error[E0433]: failed to resolve: use of undeclared crate or module `post`
  --> tests/fail/selectable.rs:58:23
   |
58 | #[diesel(table_name = post)]
   |                       ^^^^ use of undeclared crate or module `post`

error[E0412]: cannot find type `titel` in module `posts`
  --> tests/fail/selectable.rs:53:5
   |
53 |     titel: String
   |     ^^^^^ not found in `posts`

error[E0425]: cannot find value `titel` in module `posts`
  --> tests/fail/selectable.rs:53:5
   |
53 |     titel: String
   |     ^^^^^ not found in `posts`

error[E0271]: type mismatch resolving `<posts::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Never`
   --> tests/fail/selectable.rs:149:10
    |
149 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ expected struct `diesel::query_source::Once`, found struct `diesel::query_source::Never`
    |
note: required because of the requirements on the impl of `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>` for `posts::columns::id`
   --> tests/fail/selectable.rs:14:9
    |
14  |         id -> Integer,
    |         ^^
    = note: 4 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:149:10
    |
149 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
note: required because of the requirements on the impl of `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>` for `posts::columns::id`
   --> tests/fail/selectable.rs:14:9
    |
14  |         id -> Integer,
    |         ^^
    = note: 4 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:149:10
    |
149 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
note: required because of the requirements on the impl of `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>` for `posts::columns::title`
   --> tests/fail/selectable.rs:15:9
    |
15  |         title -> Text,
    |         ^^^^^
    = note: 4 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>`

error[E0271]: type mismatch resolving `<posts::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Never`
    --> tests/fail/selectable.rs:150:10
     |
150  |         .load(&mut conn)
     |          ^^^^ expected struct `diesel::query_source::Never`, found struct `diesel::query_source::Once`
     |
note: required because of the requirements on the impl of `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>` for `posts::columns::id`
    --> tests/fail/selectable.rs:14:9
     |
14   |         id -> Integer,
     |         ^^
     = note: 4 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `diesel::query_builder::select_clause::SelectClauseExpression<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>` for `diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`
     = note: required because of the requirements on the impl of `Query` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
    --> tests/fail/selectable.rs:150:10
     |
150  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
     |
     = note: `posts::columns::id` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::id as SelectableExpression<Only<posts::table>>>
               <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::id as SelectableExpression<posts::table>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
note: required because of the requirements on the impl of `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>` for `posts::columns::id`
    --> tests/fail/selectable.rs:14:9
     |
14   |         id -> Integer,
     |         ^^
     = note: 4 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `diesel::query_builder::select_clause::SelectClauseExpression<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>` for `diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`
     = note: required because of the requirements on the impl of `Query` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
    --> tests/fail/selectable.rs:150:10
     |
150  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
     |
     = note: `posts::columns::title` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::title as SelectableExpression<Only<posts::table>>>
               <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::title as SelectableExpression<posts::table>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
note: required because of the requirements on the impl of `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>` for `posts::columns::title`
    --> tests/fail/selectable.rs:15:9
     |
15   |         title -> Text,
     |         ^^^^^
     = note: 4 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `diesel::query_builder::select_clause::SelectClauseExpression<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>` for `diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`
     = note: required because of the requirements on the impl of `Query` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: the trait bound `posts::columns::id: IsContainedInGroupBy<users::columns::id>` is not satisfied
   --> tests/fail/selectable.rs:157:10
    |
157 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `IsContainedInGroupBy<users::columns::id>` is not implemented for `posts::columns::id`
    |
    = help: the following other types implement trait `IsContainedInGroupBy<T>`:
              <posts::columns::id as IsContainedInGroupBy<posts::columns::id>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::title>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::user_id>>
note: required because of the requirements on the impl of `ValidGrouping<posts::columns::id>` for `users::columns::id`
   --> tests/fail/selectable.rs:7:9
    |
7   |         id -> Integer,
    |         ^^
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `ValidGrouping<posts::columns::id>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, Inner>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, Inner>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::order_clause::NoOrderClause, diesel::query_builder::limit_offset_clause::LimitOffsetClause<diesel::query_builder::limit_clause::NoLimitClause, diesel::query_builder::offset_clause::NoOffsetClause>, diesel::query_builder::group_by_clause::GroupByClause<posts::columns::id>>`

error[E0277]: the trait bound `posts::columns::id: IsContainedInGroupBy<users::columns::name>` is not satisfied
   --> tests/fail/selectable.rs:157:10
    |
157 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `IsContainedInGroupBy<users::columns::name>` is not implemented for `posts::columns::id`
    |
    = help: the following other types implement trait `IsContainedInGroupBy<T>`:
              <posts::columns::id as IsContainedInGroupBy<posts::columns::id>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::title>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::user_id>>
note: required because of the requirements on the impl of `ValidGrouping<posts::columns::id>` for `users::columns::name`
   --> tests/fail/selectable.rs:8:9
    |
8   |         name -> Text,
    |         ^^^^
    = note: 3 redundant requirements hidden
    = note: required because of the requirements on the impl of `ValidGrouping<posts::columns::id>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, Inner>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, Inner>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::order_clause::NoOrderClause, diesel::query_builder::limit_offset_clause::LimitOffsetClause<diesel::query_builder::limit_clause::NoLimitClause, diesel::query_builder::offset_clause::NoOffsetClause>, diesel::query_builder::group_by_clause::GroupByClause<posts::columns::id>>`

error[E0277]: the trait bound `diesel::expression::is_aggregate::No: MixedAggregates<diesel::expression::is_aggregate::Yes>` is not satisfied
   --> tests/fail/selectable.rs:164:10
    |
164 |         .select(UserWithPostCount::as_select())
    |          ^^^^^^ the trait `MixedAggregates<diesel::expression::is_aggregate::Yes>` is not implemented for `diesel::expression::is_aggregate::No`
    |
    = help: the following other types implement trait `MixedAggregates<Other>`:
              <diesel::expression::is_aggregate::No as MixedAggregates<diesel::expression::is_aggregate::Never>>
              <diesel::expression::is_aggregate::No as MixedAggregates<diesel::expression::is_aggregate::No>>
    = note: required because of the requirements on the impl of `ValidGrouping<()>` for `(users::columns::name, diesel::expression::count::count::count<diesel::sql_types::Integer, posts::columns::id>)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `ValidGrouping<()>` for `diesel::expression::select_by::SelectBy<UserWithPostCount, Pg>`
    = note: required because of the requirements on the impl of `SelectDsl<diesel::expression::select_by::SelectBy<UserWithPostCount, Pg>>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, Inner>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:172:10
    |
172 |         .returning(UserWithEmbeddedPost::as_select())
    |          ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
   --> $DIESEL/src/query_builder/insert_statement/mod.rs
    |
    |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
    |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:172:10
    |
172 |         .returning(UserWithEmbeddedPost::as_select())
    |          ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
   --> $DIESEL/src/query_builder/insert_statement/mod.rs
    |
    |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
    |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`

error[E0271]: type mismatch resolving `<users::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Once`
   --> tests/fail/selectable.rs:172:10
    |
172 |         .returning(UserWithEmbeddedPost::as_select())
    |          ^^^^^^^^^ expected struct `diesel::query_source::Once`, found struct `diesel::query_source::Never`
    |
note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `posts::columns::id`
   --> tests/fail/selectable.rs:14:9
    |
14  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
   --> $DIESEL/src/query_builder/insert_statement/mod.rs
    |
    |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
    |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
    --> tests/fail/selectable.rs:173:10
     |
173  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
     |
     = note: `posts::columns::id` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::id as SelectableExpression<Only<posts::table>>>
               <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::id as SelectableExpression<posts::table>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
    --> tests/fail/selectable.rs:173:10
     |
173  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
     |
     = note: `posts::columns::title` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::title as SelectableExpression<Only<posts::table>>>
               <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::title as SelectableExpression<posts::table>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0271]: type mismatch resolving `<users::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Once`
    --> tests/fail/selectable.rs:173:10
     |
173  |         .load(&mut conn)
     |          ^^^^ expected struct `diesel::query_source::Once`, found struct `diesel::query_source::Never`
     |
note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `posts::columns::id`
    --> tests/fail/selectable.rs:14:9
     |
14   |         id -> Integer,
     |         ^^
     = note: 1 redundant requirement hidden
     = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:180:10
    |
180 |         .returning(UserWithEmbeddedPost::as_select())
    |          ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `Query` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
   --> $DIESEL/src/query_builder/update_statement/mod.rs
    |
    |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
    |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:180:10
    |
180 |         .returning(UserWithEmbeddedPost::as_select())
    |          ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `Query` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
   --> $DIESEL/src/query_builder/update_statement/mod.rs
    |
    |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
    |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`

error[E0271]: type mismatch resolving `<users::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Once`
   --> tests/fail/selectable.rs:180:10
    |
180 |         .returning(UserWithEmbeddedPost::as_select())
    |          ^^^^^^^^^ expected struct `diesel::query_source::Once`, found struct `diesel::query_source::Never`
    |
note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `posts::columns::id`
   --> tests/fail/selectable.rs:14:9
    |
14  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
    = note: required because of the requirements on the impl of `Query` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
   --> $DIESEL/src/query_builder/update_statement/mod.rs
    |
    |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
    |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
    --> tests/fail/selectable.rs:181:10
     |
181  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
     |
     = note: `posts::columns::id` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::id as SelectableExpression<Only<posts::table>>>
               <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::id as SelectableExpression<posts::table>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
    --> tests/fail/selectable.rs:181:10
     |
181  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
     |
     = note: `posts::columns::title` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::title as SelectableExpression<Only<posts::table>>>
               <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::title as SelectableExpression<posts::table>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0271]: type mismatch resolving `<users::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Once`
    --> tests/fail/selectable.rs:181:10
     |
181  |         .load(&mut conn)
     |          ^^^^ expected struct `diesel::query_source::Once`, found struct `diesel::query_source::Never`
     |
note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `posts::columns::id`
    --> tests/fail/selectable.rs:14:9
     |
14   |         id -> Integer,
     |         ^^
     = note: 1 redundant requirement hidden
     = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `UpdateStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:187:20
    |
187 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
note: required by a bound in `DeleteStatement::<T, U>::returning`
   --> $DIESEL/src/query_builder/delete_statement/mod.rs
    |
    |         E: SelectableExpression<T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteStatement::<T, U>::returning`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:187:20
    |
187 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
note: required by a bound in `DeleteStatement::<T, U>::returning`
   --> $DIESEL/src/query_builder/delete_statement/mod.rs
    |
    |         E: SelectableExpression<T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteStatement::<T, U>::returning`

error[E0271]: type mismatch resolving `<users::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Once`
   --> tests/fail/selectable.rs:187:20
    |
187 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `diesel::query_source::Once`, found struct `diesel::query_source::Never`
    |          |
    |          required by a bound introduced by this call
    |
note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `posts::columns::id`
   --> tests/fail/selectable.rs:14:9
    |
14  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
    = note: 2 redundant requirements hidden
    = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
note: required by a bound in `DeleteStatement::<T, U>::returning`
   --> $DIESEL/src/query_builder/delete_statement/mod.rs
    |
    |         E: SelectableExpression<T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteStatement::<T, U>::returning`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
    --> tests/fail/selectable.rs:188:10
     |
188  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
     |
     = note: `posts::columns::id` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::id as SelectableExpression<Only<posts::table>>>
               <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::id as SelectableExpression<posts::table>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `DeleteStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `DeleteStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
    --> tests/fail/selectable.rs:188:10
     |
188  |         .load(&mut conn)
     |          ^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
     |
     = note: `posts::columns::title` is no valid selection for `users::table`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
               <posts::columns::title as SelectableExpression<Only<posts::table>>>
               <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
               <posts::columns::title as SelectableExpression<posts::table>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
               <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `DeleteStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `DeleteStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0271]: type mismatch resolving `<users::table as AppearsInFromClause<posts::table>>::Count == diesel::query_source::Once`
    --> tests/fail/selectable.rs:188:10
     |
188  |         .load(&mut conn)
     |          ^^^^ expected struct `diesel::query_source::Once`, found struct `diesel::query_source::Never`
     |
note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `posts::columns::id`
    --> tests/fail/selectable.rs:14:9
     |
14   |         id -> Integer,
     |         ^^
     = note: 1 redundant requirement hidden
     = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(posts::columns::id, posts::columns::title)`
     = note: 2 redundant requirements hidden
     = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>`
     = note: required because of the requirements on the impl of `Query` for `DeleteStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, UserWithEmbeddedPost>` for `DeleteStatement<users::table, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0599]: the function or associated item `as_select` exists for struct `UserWithoutSelectable`, but its trait bounds were not satisfied
   --> tests/fail/selectable.rs:192:56
    |
80  | struct UserWithoutSelectable {
    | ----------------------------
    | |
    | function or associated item `as_select` not found for this struct
    | doesn't satisfy `UserWithoutSelectable: diesel::Selectable<_>`
    | doesn't satisfy `UserWithoutSelectable: diesel::SelectableHelper<_>`
...
192 |     let _ = users::table.select(UserWithoutSelectable::as_select()).load(&mut conn).unwrap();
    |                                                        ^^^^^^^^^ function or associated item cannot be called on `UserWithoutSelectable` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `UserWithoutSelectable: diesel::Selectable<_>`
            which is required by `UserWithoutSelectable: diesel::SelectableHelper<_>`
            `&UserWithoutSelectable: diesel::Selectable<_>`
            which is required by `&UserWithoutSelectable: diesel::SelectableHelper<_>`
            `&mut UserWithoutSelectable: diesel::Selectable<_>`
            which is required by `&mut UserWithoutSelectable: diesel::SelectableHelper<_>`
note: the following trait must be implemented
   --> $DIESEL/src/expression/mod.rs
    |
    | pub trait Selectable<DB: Backend> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<Post, _>: SingleValue` is not satisfied
    --> tests/fail/selectable.rs:195:52
     |
195  |     let _ = posts::table.select(Post::as_select()).load::<(i32, String)>(&mut conn).unwrap();
     |                                                    ^^^^ the trait `SingleValue` is not implemented for `diesel::expression::select_by::SelectBy<Post, _>`
     |
     = help: the following other types implement trait `SingleValue`:
               Array<ST>
               BigInt
               Bool
               CChar
               Cidr
               Datetime
               Inet
               Interval
             and 23 others
     = note: required because of the requirements on the impl of `load_dsl::private::CompatibleType<(i32, std::string::String), _>` for `diesel::expression::select_by::SelectBy<Post, _>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, (i32, std::string::String)>` for `SelectStatement<FromClause<posts::table>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<Post, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: the trait bound `(i32, std::string::String): diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not satisfied
    --> tests/fail/selectable.rs:195:52
     |
195  |     let _ = posts::table.select(Post::as_select()).load::<(i32, String)>(&mut conn).unwrap();
     |                                                    ^^^^ the trait `diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not implemented for `(i32, std::string::String)`
     |
     = help: the following other types implement trait `diesel::Queryable<ST, DB>`:
               <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>
               <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>
               <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>
               <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>
               <(T0, T1, T2, T3) as diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>>
               <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>
               <(T0, T1, T2, T3, T4) as diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>>
               <(T0, T1, T2, T3, T4) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>>
             and 25 others
     = note: required because of the requirements on the impl of `FromSqlRow<diesel::expression::select_by::SelectBy<Post, _>, _>` for `(i32, std::string::String)`
     = note: required because of the requirements on the impl of `load_dsl::private::CompatibleType<(i32, std::string::String), _>` for `diesel::expression::select_by::SelectBy<Post, _>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, (i32, std::string::String)>` for `SelectStatement<FromClause<posts::table>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<Post, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<Post, _>: SingleValue` is not satisfied
    --> tests/fail/selectable.rs:196:65
     |
196  |     let _ = posts::table.select(Post::as_select()).into_boxed().load::<(i32, String)>(&mut conn).unwrap();
     |                                                                 ^^^^ the trait `SingleValue` is not implemented for `diesel::expression::select_by::SelectBy<Post, _>`
     |
     = help: the following other types implement trait `SingleValue`:
               Array<ST>
               BigInt
               Bool
               CChar
               Cidr
               Datetime
               Inet
               Interval
             and 23 others
     = note: required because of the requirements on the impl of `load_dsl::private::CompatibleType<(i32, std::string::String), _>` for `diesel::expression::select_by::SelectBy<Post, _>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, (i32, std::string::String)>` for `BoxedSelectStatement<'_, diesel::expression::select_by::SelectBy<Post, _>, FromClause<posts::table>, _>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: the trait bound `(i32, std::string::String): diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not satisfied
    --> tests/fail/selectable.rs:196:65
     |
196  |     let _ = posts::table.select(Post::as_select()).into_boxed().load::<(i32, String)>(&mut conn).unwrap();
     |                                                                 ^^^^ the trait `diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not implemented for `(i32, std::string::String)`
     |
     = help: the following other types implement trait `diesel::Queryable<ST, DB>`:
               <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>
               <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>
               <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>
               <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>
               <(T0, T1, T2, T3) as diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>>
               <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>
               <(T0, T1, T2, T3, T4) as diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>>
               <(T0, T1, T2, T3, T4) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>>
             and 25 others
     = note: required because of the requirements on the impl of `FromSqlRow<diesel::expression::select_by::SelectBy<Post, _>, _>` for `(i32, std::string::String)`
     = note: required because of the requirements on the impl of `load_dsl::private::CompatibleType<(i32, std::string::String), _>` for `diesel::expression::select_by::SelectBy<Post, _>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, (i32, std::string::String)>` for `BoxedSelectStatement<'_, diesel::expression::select_by::SelectBy<Post, _>, FromClause<posts::table>, _>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: the trait bound `(diesel::expression::select_by::SelectBy<Post, _>, diesel::sql_types::Text): load_dsl::private::CompatibleType<((i32, std::string::String), std::string::String), _>` is not satisfied
    --> tests/fail/selectable.rs:197:68
     |
197  |     let _ = posts::table.select((Post::as_select(), posts::title)).load::<((i32, String), String)>(&mut conn).unwrap();
     |                                                                    ^^^^ the trait `load_dsl::private::CompatibleType<((i32, std::string::String), std::string::String), _>` is not implemented for `(diesel::expression::select_by::SelectBy<Post, _>, diesel::sql_types::Text)`
     |
     = help: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:
               (ST0, ST1)
               (ST0, ST1, ST2)
               (ST0, ST1, ST2, ST3)
               (ST0, ST1, ST2, ST3, ST4)
               (ST0, ST1, ST2, ST3, ST4, ST5)
               (ST0, ST1, ST2, ST3, ST4, ST5, ST6)
               (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)
               (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8)
             and 8 others
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, ((i32, std::string::String), std::string::String)>` for `SelectStatement<FromClause<posts::table>, diesel::query_builder::select_clause::SelectClause<(diesel::expression::select_by::SelectBy<Post, _>, posts::columns::title)>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<Post, _>: SingleValue` is not satisfied
    --> tests/fail/selectable.rs:201:10
     |
201  |         .load::<(i32, String, i32)>(&mut conn)
     |          ^^^^ the trait `SingleValue` is not implemented for `diesel::expression::select_by::SelectBy<Post, _>`
     |
     = help: the following other types implement trait `SingleValue`:
               Array<ST>
               BigInt
               Bool
               CChar
               Cidr
               Datetime
               Inet
               Interval
             and 23 others
     = note: required because of the requirements on the impl of `load_dsl::private::CompatibleType<(i32, std::string::String, i32), _>` for `diesel::expression::select_by::SelectBy<Post, _>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, (i32, std::string::String, i32)>` for `InsertStatement<posts::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<posts::columns::title, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, posts::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<Post, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0277]: the trait bound `(i32, std::string::String, i32): diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not satisfied
    --> tests/fail/selectable.rs:201:10
     |
201  |         .load::<(i32, String, i32)>(&mut conn)
     |          ^^^^ the trait `diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not implemented for `(i32, std::string::String, i32)`
     |
     = help: the following other types implement trait `diesel::Queryable<ST, DB>`:
               <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>
               <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>
               <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>
               <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>
               <(T0, T1, T2, T3) as diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>>
               <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>
               <(T0, T1, T2, T3, T4) as diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>>
               <(T0, T1, T2, T3, T4) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3, ST4)>, Pg>>
             and 25 others
     = note: required because of the requirements on the impl of `FromSqlRow<diesel::expression::select_by::SelectBy<Post, _>, _>` for `(i32, std::string::String, i32)`
     = note: required because of the requirements on the impl of `load_dsl::private::CompatibleType<(i32, std::string::String, i32), _>` for `diesel::expression::select_by::SelectBy<Post, _>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, (i32, std::string::String, i32)>` for `InsertStatement<posts::table, diesel::query_builder::insert_statement::ValuesClause<ColumnInsertValue<posts::columns::title, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, posts::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<diesel::expression::select_by::SelectBy<Post, _>>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`

error[E0271]: type mismatch resolving `<diesel::SqliteConnection as diesel::Connection>::Backend == Pg`
    --> tests/fail/selectable.rs:210:10
     |
210  |         .load(&mut conn)
     |          ^^^^ expected struct `Pg`, found struct `Sqlite`
     |
     = note: required because of the requirements on the impl of `LoadQuery<'_, diesel::SqliteConnection, UserWithPostCount>` for `SelectStatement<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, Inner>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithPostCount, Pg>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::order_clause::NoOrderClause, diesel::query_builder::limit_offset_clause::LimitOffsetClause<diesel::query_builder::limit_clause::NoLimitClause, diesel::query_builder::offset_clause::NoOffsetClause>, diesel::query_builder::group_by_clause::GroupByClause<users::columns::id>>`
note: required by a bound in `diesel::RunQueryDsl::load`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::RunQueryDsl::load`
