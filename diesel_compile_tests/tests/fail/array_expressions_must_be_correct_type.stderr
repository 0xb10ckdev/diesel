error[E0277]: Cannot select `f64` from `NoFromClause`
   --> tests/fail/array_expressions_must_be_correct_type.rs:9:5
    |
9   |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
    |     ^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `f64`
    |
    = note: `f64` is no valid selection for `NoFromClause`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <&'a T as SelectableExpression<QS>>
              <(T0, T1) as SelectableExpression<QS>>
              <(T0, T1, T2) as SelectableExpression<QS>>
              <(T0, T1, T2, T3) as SelectableExpression<QS>>
              <(T0, T1, T2, T3, T4) as SelectableExpression<QS>>
              <(T0, T1, T2, T3, T4, T5) as SelectableExpression<QS>>
              <(T0, T1, T2, T3, T4, T5, T6) as SelectableExpression<QS>>
              <(T0, T1, T2, T3, T4, T5, T6, T7) as SelectableExpression<QS>>
            and 154 others
    = note: required because of the requirements on the impl of `SelectableExpression<NoFromClause>` for `(f64, f64)`
    = note: 1 redundant requirement hidden
    = note: required because of the requirements on the impl of `SelectableExpression<NoFromClause>` for `diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>`
    = note: required because of the requirements on the impl of `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>` for `diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>`
    = note: required because of the requirements on the impl of `Query` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
    = note: required because of the requirements on the impl of `AsQuery` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
note: required by a bound in `diesel::select`
   --> $DIESEL/src/query_builder/functions.rs
    |
    |     crate::dsl::BareSelect<T>: AsQuery,
    |                                ^^^^^^^ required by this bound in `diesel::select`

error[E0277]: the trait bound `f64: ValidGrouping<()>` is not satisfied
   --> tests/fail/array_expressions_must_be_correct_type.rs:9:5
    |
9   |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
    |     ^^^^^^ the trait `ValidGrouping<()>` is not implemented for `f64`
    |
    = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
              <&'a T as ValidGrouping<GB>>
              <(T0, T1) as ValidGrouping<__GroupByClause>>
              <(T0, T1, T2) as ValidGrouping<__GroupByClause>>
              <(T0, T1, T2, T3) as ValidGrouping<__GroupByClause>>
              <(T0, T1, T2, T3, T4) as ValidGrouping<__GroupByClause>>
              <(T0, T1, T2, T3, T4, T5) as ValidGrouping<__GroupByClause>>
              <(T0, T1, T2, T3, T4, T5, T6) as ValidGrouping<__GroupByClause>>
              <(T0, T1, T2, T3, T4, T5, T6, T7) as ValidGrouping<__GroupByClause>>
            and 139 others
    = note: required because of the requirements on the impl of `ValidGrouping<()>` for `(f64, f64)`
    = note: 1 redundant requirement hidden
    = note: required because of the requirements on the impl of `ValidGrouping<()>` for `diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>`
    = note: required because of the requirements on the impl of `Query` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
    = note: required because of the requirements on the impl of `AsQuery` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
note: required by a bound in `diesel::select`
   --> $DIESEL/src/query_builder/functions.rs
    |
    |     crate::dsl::BareSelect<T>: AsQuery,
    |                                ^^^^^^^ required by this bound in `diesel::select`

error[E0277]: Cannot select `f64` from `NoFromClause`
    --> tests/fail/array_expressions_must_be_correct_type.rs:9:33
     |
9    |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
     |                                 ^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `f64`
     |
     = note: `f64` is no valid selection for `NoFromClause`
     = help: the following other types implement trait `SelectableExpression<QS>`:
               <&'a T as SelectableExpression<QS>>
               <(T0, T1) as SelectableExpression<QS>>
               <(T0, T1, T2) as SelectableExpression<QS>>
               <(T0, T1, T2, T3) as SelectableExpression<QS>>
               <(T0, T1, T2, T3, T4) as SelectableExpression<QS>>
               <(T0, T1, T2, T3, T4, T5) as SelectableExpression<QS>>
               <(T0, T1, T2, T3, T4, T5, T6) as SelectableExpression<QS>>
               <(T0, T1, T2, T3, T4, T5, T6, T7) as SelectableExpression<QS>>
             and 154 others
     = note: required because of the requirements on the impl of `SelectableExpression<NoFromClause>` for `(f64, f64)`
     = note: 1 redundant requirement hidden
     = note: required because of the requirements on the impl of `SelectableExpression<NoFromClause>` for `diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>`
     = note: required because of the requirements on the impl of `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>` for `diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>`
     = note: required because of the requirements on the impl of `Query` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, Vec<i32>>` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
note: required by a bound in `get_result`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `get_result`

error[E0277]: the trait bound `f64: ValidGrouping<()>` is not satisfied
    --> tests/fail/array_expressions_must_be_correct_type.rs:9:33
     |
9    |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
     |                                 ^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `f64`
     |
     = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
               <&'a T as ValidGrouping<GB>>
               <(T0, T1) as ValidGrouping<__GroupByClause>>
               <(T0, T1, T2) as ValidGrouping<__GroupByClause>>
               <(T0, T1, T2, T3) as ValidGrouping<__GroupByClause>>
               <(T0, T1, T2, T3, T4) as ValidGrouping<__GroupByClause>>
               <(T0, T1, T2, T3, T4, T5) as ValidGrouping<__GroupByClause>>
               <(T0, T1, T2, T3, T4, T5, T6) as ValidGrouping<__GroupByClause>>
               <(T0, T1, T2, T3, T4, T5, T6, T7) as ValidGrouping<__GroupByClause>>
             and 139 others
     = note: required because of the requirements on the impl of `ValidGrouping<()>` for `(f64, f64)`
     = note: 1 redundant requirement hidden
     = note: required because of the requirements on the impl of `ValidGrouping<()>` for `diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>`
     = note: required because of the requirements on the impl of `Query` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, Vec<i32>>` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
note: required by a bound in `get_result`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `get_result`

error[E0277]: the trait bound `f64: QueryId` is not satisfied
    --> tests/fail/array_expressions_must_be_correct_type.rs:9:33
     |
9    |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
     |                                 ^^^^^^^^^^ the trait `QueryId` is not implemented for `f64`
     |
     = help: the following other types implement trait `QueryId`:
               &'a T
               ()
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
               (T0, T1, T2, T3, T4, T5)
               (T0, T1, T2, T3, T4, T5, T6)
             and 228 others
     = note: required because of the requirements on the impl of `QueryId` for `(f64, f64)`
     = note: 3 redundant requirements hidden
     = note: required because of the requirements on the impl of `QueryId` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, Vec<i32>>` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
note: required by a bound in `get_result`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `get_result`

error[E0277]: the trait bound `f64: QueryFragment<Pg>` is not satisfied
    --> tests/fail/array_expressions_must_be_correct_type.rs:9:33
     |
9    |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
     |                                 ^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `f64`
     |
     = help: the following other types implement trait `QueryFragment<DB, SP>`:
               <&'a T as QueryFragment<DB>>
               <() as QueryFragment<DB>>
               <(T0, T1) as QueryFragment<__DB>>
               <(T0, T1, T2) as QueryFragment<__DB>>
               <(T0, T1, T2, T3) as QueryFragment<__DB>>
               <(T0, T1, T2, T3, T4) as QueryFragment<__DB>>
               <(T0, T1, T2, T3, T4, T5) as QueryFragment<__DB>>
               <(T0, T1, T2, T3, T4, T5, T6) as QueryFragment<__DB>>
             and 267 others
     = note: required because of the requirements on the impl of `QueryFragment<Pg>` for `(f64, f64)`
     = note: 4 redundant requirements hidden
     = note: required because of the requirements on the impl of `QueryFragment<Pg>` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
     = note: required because of the requirements on the impl of `LoadQuery<'_, _, Vec<i32>>` for `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(f64, f64), diesel::sql_types::Integer>>>`
note: required by a bound in `get_result`
    --> $DIESEL/src/query_dsl/mod.rs
     |
     |         Self: LoadQuery<'query, Conn, U>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `get_result`

error[E0277]: the trait bound `f64: diesel::Expression` is not satisfied
  --> tests/fail/array_expressions_must_be_correct_type.rs:9:12
   |
9  |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
   |            ^^^^^ the trait `diesel::Expression` is not implemented for `f64`
   |
   = help: the following other types implement trait `diesel::Expression`:
             &'a T
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
             (T0, T1, T2, T3, T4, T5, T6, T7)
           and 119 others
   = note: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Integer>` for `f64`
   = note: required because of the requirements on the impl of `AsExpressionList<diesel::sql_types::Integer>` for `(f64, f64)`
note: required by a bound in `diesel::dsl::array`
  --> $DIESEL/src/pg/expression/array.rs
   |
   |     T: AsExpressionList<ST>,
   |        ^^^^^^^^^^^^^^^^^^^^ required by this bound in `diesel::dsl::array`

error[E0277]: the trait bound `f64: diesel::Expression` is not satisfied
 --> tests/fail/array_expressions_must_be_correct_type.rs:9:12
  |
9 |     select(array((1f64, 3f64))).get_result::<Vec<i32>>(&mut connection);
  |            ^^^^^^^^^^^^^^^^^^^ the trait `diesel::Expression` is not implemented for `f64`
  |
  = help: the following other types implement trait `diesel::Expression`:
            &'a T
            (T0, T1)
            (T0, T1, T2)
            (T0, T1, T2, T3)
            (T0, T1, T2, T3, T4)
            (T0, T1, T2, T3, T4, T5)
            (T0, T1, T2, T3, T4, T5, T6)
            (T0, T1, T2, T3, T4, T5, T6, T7)
          and 119 others
  = note: required because of the requirements on the impl of `AsExpression<diesel::sql_types::Integer>` for `f64`
